< 제어문 >
1. 조건문
   - if(boolean형)
   - switch(정수형+String)

2. 반복문
   - while(boolean형){}
   - do{} while(boolean형);
   - for(초기식;조건식;증감식){}

< 예약어 >
1. break
   - loop, switch
   - 첫번째 블럭 '나간다'
   - labled break

2. continue
   - loop
   - 조건이 맞으면 '건너뛴다'
   - labled continue

3. return
   - 생성자 or 메소드 '어디서나' 나올 수 있음
   - 호출한 '곳'이나 '놈'으로 '되돌린다'
   - 메소드의 리턴타입이 void가 아니면 생략 불가

< 연산자(Operator) >
1. (데이터) 연산하게 하는 '기호'

2. 종류
	1) 산술 ex) +, -, *, /, %
	2) 증감 ex) ++,  --
	3) 대입 ex) =
	4) 산술대입 ex) +=, -=, *=, /=, %=
	5) 비트 ex) &, |, ~, 시프트( <<, >>, >>> )
	6) 비교 ex) ==, !=, <, <=, >, >=
	7) 논리 ex) &, &&, |, ||
	8) 논리대입  ex) &=, |=
	9) 조건 ex) A? B : C
	10) instanceof ex) 객체 instanceof 클래스

배열(Array)
같은 타입의 데이터 '저장소'로써, 생성될 때 그 크기가 고정되는 '객체' -> 객체는 어디에 만들어지냐 메모리에 만들어짐 (휘발성)
(1) 선언
    type 배열변수[];
    (예 : int is[], String strs[], ..)

(2) 생성
    배열변 = new type[크기];

(3) 초기화
    배열변수[인덱스] = 데이터;

(4) 선언 및 생성
    type 배열변수[] = new type[크기];

(5) 선언 생성 및 초기화
    String strs[] = {"봄", "여름", "가을", "겨울"};

    #참고) 배열크기속성: length
    #주의) 선언과 생성초기화는 분리가 불가능함

(6) 배열방의 default 초기값(by JVM)
    - boolean(false), 정수(0, 0L), 실수(0.0f, 0.0)
    -null

(7) 형변환
    자동형변환이 가능한 데이터라면 변환되서 저장됨
    ( 예 : b, s, c, i, (int)lo, (int)f, (int)d )
    class C
    {
    	byte b = 10;
    	short s = 20;
    	char c = 'A';
    	int i = 30;
    	long lo = 40L;
    	float f = 50.0f;
    	double d = 60.0;

        C(){
    		int is[] = {b, s, c, i, (int)lo, (int)f, (int)d};
    		out(is); //호출시 넘겨줌
    	}
    	void out(int[] is){ //정의
    		for(int i=0; i<is.length; i++){
    			System.out.println("is["+i+"]: " +is[i]);
    		}
    	}
    	public static void main(String[] args) {
    		new C();
    	}
    }

(8) 2차원 배열
    1차원 배열을 데이터(element)로 갖는 배열
    class D {
      int is[] = {1, 2};
      int iss[][] = {is, {30, 40, 50}, {600}}
      void out() {
        System.out.println("iss[0][0]: " + iss[0][0]); -> 1
        System.out.println("iss[0][0]: " + iss[0][1]); -> 2
        System.out.println("iss[0][0]: " + iss[1][0]); -> 30
        System.out.println("iss[0][0]: " + iss[1][1]); -> 40
        }
      public static void main(String[] args) {
         new D().out();
      }
    }

(9) N차원배열
    N-1차원 배열을 데이터(element)로 갖는 배열


Collection( Data structure / 가변배열 )
# 같은 타입의 '참조형'데이터 '저장소'로써 그 크기가 변할 수 있는 '객체'

(1) 종류
    - java.util.Collection
       |               |
      List            Set
        |              |
 Vector, ArrayList...TreeSet
    - java.util.Map
            |
      Hashmap, hashtable,..

(2) 특성
   1) List
      - 순서를 보전
      - 중복된 데이터를 허용
      - day07/A.java
   2) Set (수학의 집합)
      - TreeSet
      - 순서를 보전하지 않음
      - 집합이 있어서 중복된 데이터는 1개만 출력됨
   3) Map ( 수학에서 1:1 대응이랑 비슷함 )
      - 순서를 보전하지 않음
      - key 와 value값 한쌍으로 저장됨
      - 정열 안됨
      - 키는 중복이 될 수 없음, value값 중복허용O
      - 키만 중복이 안되면 됨

        만약 key값이 중복되면... value값은 나중값으로 대체됨
   4) 확장
       - Generic (예 : A2, B2, C2.java) -> Object
       - AutoBoxing ( 예 : C3.java )
         -Boxing ( 예 : Boxing.java )
         -UnBoxing
       - ex) Vector<String> v = new Vector<String>();
       - Enhanced Loop
       for (int key : keys) { //진화된 루프
          System.out.println("key: " + key);
       }

   5) N차원 배열
      (N-1)차원 컬렉션을 데이터로(Element) 갖는 컬렉션

<OOP 특성>

(1) 상속성 (inheritance)
    ex) day07.java
    부모는 "모든 것"이 자식에게 "상속"되어지는 것(== '사용' 할 수 있는 것)
    소스 중복을 방지하기 위해서
    1) 자식 개체가 생성되려면.. 먼저 부모 객체가 생성되어야 함
       (다른 생성자가 하나도 없을 때에만 JVM이 기본생성자를 만들어 줌)
    2) 모든 생성자의 첫라인에는 super();가 생략되어 있다.
    3) 클래스간 상속은 하나만 가능하다. -> 단일 상속
    4) 재사용성이 있다.
    5) 모든 객체는 object의 자식이다. (묵시적 상속)
    6) 속성은 제로
    7) 부모메소드를 자식에서 재정의(==오버라이딩) 할 수 있음 -> 상속관계에서만 가능
    8) 형변환 -> 자동형변환 by JVM (자식 -> )
    9) 강제형변환은 원래의 자기타입을 되찾을 때만 가능
    10) 형제관계는 남남 관계가 맞다.
       - 형변환이 불가능하다.
       - Parent -> Child = 다운캐스팅
       - Child -> Parent = 업캐스팅
     class Parent {
     	String name;
         int age;
     }

     class Child extends Parent {
     	/*
         String name;
         int age;
         */
     	int number;
     }

     Parent p = new Parent();
     Child c = new Child();

     Parent p2 = (Parent)c; // 업캐스팅 - 자식에서 부모로
     Child c2 = (Child)p2; // 다운캐스팅 - 부모에서 자식으로

(2) 다형성 (Polymorphism) == 오버라이딩(재정의)
    - 같은 타입 객체의 같은 메소드가 다른 일을 하는 것

(3) 은닉성 (Information Hiding)
    - 외부 프로그램으로부터 '속성값'을 감추는 것

(4) 캡슐화 (Encapsulation) == 은닉성은 같은 개념임
    - 메소드의 캡슐화 : 메소드의 구현내용을 몰라도 그 형태만 알면 호출해서 사용할 수 있는 것을 캡슐화라고 함 (이름 파라미터 반환값)
    - 객체의 캡슐화 : 객체가 속성값들을 감추고 선택적인 메소드로 속성값들의 일부를 접근하게 하는 것

<예외처리>
(1) 예외(Exception)
    프로그램이 정상적으로 진행되지 못하게 하는 '돌발상황' (객체)
    int i = Integer.parseInt("가나다")
    숫자가 아닌 형태의 문자열을 숫자로 바꾸려 할때 발생함
    채팅하다가 상대방이 채팅방을 나가 버릴 때
    온라인 게임중에 전원케이블 차버렸을 때
    게임 서버 다운

(2) 처리 목적
    프로그램 진행시에 발생할 수 있는 "돌발상황"을 예외로 미리 정해놓고,
    해당하는 예외가 발생할 경우 '적절한 조치'를 취해서, 프로그램이 정상작동
    되도록 하는 것을 예외처리라고 한다.

(3) 계층도
    Object - Throwable - error/exception - compileException/RuntimeException
    ex) IOexception -> Compileexception
        NumberFormatException -> RuntimeException
        런타임 익셉션이 더 처리하기 어려움

    class A {
        void m() {
            String str = "100";
            int i = Integer.parseInt(str);
            System.out.println("i : " + (i+1));
        }
        public static void main(String[] args) {
            new A().m();
        }
    }

    # 인간이 개입할 때 try-catch 문을 사용한다.
(4) 특징 //Tester
     0) 일(생성자 or 메소드)할 때 발생할 수 있음
     1) throw로 예외 객체를 던짐(발생시킴)
     2) throws로 예외 발생 가능 "표식"을 함 ( == 소극적으로 '떠넘김')
     3) trycatch로 잡을 수 있음 ( == 적극적 "때려잡음" )

(5) 방법
   1) 때려 잡는 법
      try{
        예외가 발생할 수 있는 구문(생성자 or 메소드 호출)
      } catch (예외타입 예외객체 변수) {
          예외처리 로직
      }
   2) 떠넘기는 법
      throws 예외타입을 써줌

(6) 순서 (Try 블럭 안에 2개 이상의 예외가 발생할 수 있는 경우 )
    1) 상속관계 X
       [순서는 존재하지 않는다] - 아무예외나 먼저 잡아줌
       catch(MyException me) {}
       catch(YourException ye {}
    2) 상속관계 O
       [순서존재] - 하위예외를 먼저 잡아줌
       catch(YourException ye) {}
       catch(Exception e) {}

       Why? 왜 하위예외를 만들어서 먼저 잡아주는 것이 좋을까? 구체적이고 세련된 처리를 위해서 잡아줌

(7) 2개 이상의 예외를 떠넘길 때
    cf) '떠넘김(throws)'과 '때려잡음(try/catch)' 처리를 섞어 사용해도 됨

(8) finally 절
    ex) day09/C.java
    1) 항상 수행되는 절
       - 예외 발생 여부와 상관없이 수행
       - 심지어... return을 만나더라도 finally절 수행 후 리턴
    2) try절이 나오면.. catch절이 나오던지, finally절이 나오던지... 둘다 나오던지 해야 함
    3) 얘는 못이김 -> System.exit(0);, System.exit(-1);

       cf) API를 볼 줄 알아야 함

< 제한자 (Modifier) >
클래스, 변수, 생성자, 메소드 앞에 붙어거 기능을 '제한' 하는 예약어
(1) 접근제한자 (Access Modifier)
    1) 종류
       <1> public : 접근제한이 없음
       <2> private
       <3> protected :
       <4> default :
