< 제어문 >
1. 조건문
   - if(boolean형)
   - switch(정수형+String)

2. 반복문
   - while(boolean형){}
   - do{} while(boolean형);
   - for(초기식;조건식;증감식){}

< 예약어 >
1. break
   - loop, switch
   - 첫번째 블럭 '나간다'
   - labled break

2. continue
   - loop
   - 조건이 맞으면 '건너뛴다'
   - labled continue

3. return
   - 생성자 or 메소드 '어디서나' 나올 수 있음
   - 호출한 '곳'이나 '놈'으로 '되돌린다'
   - 메소드의 리턴타입이 void가 아니면 생략 불가

< 연산자(Operator) >
1. (데이터) 연산하게 하는 '기호'

2. 종류
	1) 산술 ex) +, -, *, /, %
	2) 증감 ex) ++,  --
	3) 대입 ex) =
	4) 산술대입 ex) +=, -=, *=, /=, %=
	5) 비트 ex) &, |, ~, 시프트( <<, >>, >>> )
	6) 비교 ex) ==, !=, <, <=, >, >=
	7) 논리 ex) &, &&, |, ||
	8) 논리대입  ex) &=, |=
	9) 조건 ex) A? B : C
	10) instanceof ex) 객체 instanceof 클래스

배열(Array)
같은 타입의 데이터 '저장소'로써, 생성될 때 그 크기가 고정되는 '객체' -> 객체는 어디에 만들어지냐 메모리에 만들어짐 (휘발성)
(1) 선언
    type 배열변수[];
    (예 : int is[], String strs[], ..)

(2) 생성
    배열변 = new type[크기];

(3) 초기화
    배열변수[인덱스] = 데이터;

(4) 선언 및 생성
    type 배열변수[] = new type[크기];

(5) 선언 생성 및 초기화
    String strs[] = {"봄", "여름", "가을", "겨울"};

    #참고) 배열크기속성: length
    #주의) 선언과 생성초기화는 분리가 불가능함

(6) 배열방의 default 초기값(by JVM)
    - boolean(false), 정수(0, 0L), 실수(0.0f, 0.0)
    -null

(7) 형변환
    자동형변환이 가능한 데이터라면 변환되서 저장됨
    ( 예 : b, s, c, i, (int)lo, (int)f, (int)d )
    class C
    {
    	byte b = 10;
    	short s = 20;
    	char c = 'A';
    	int i = 30;
    	long lo = 40L;
    	float f = 50.0f;
    	double d = 60.0;

        C(){
    		int is[] = {b, s, c, i, (int)lo, (int)f, (int)d};
    		out(is); //호출시 넘겨줌
    	}
    	void out(int[] is){ //정의
    		for(int i=0; i<is.length; i++){
    			System.out.println("is["+i+"]: " +is[i]);
    		}
    	}
    	public static void main(String[] args) {
    		new C();
    	}
    }

(8) 2차원 배열
    1차원 배열을 데이터(element)로 갖는 배열
    class D {
      int is[] = {1, 2};
      int iss[][] = {is, {30, 40, 50}, {600}}
      void out() {
        System.out.println("iss[0][0]: " + iss[0][0]); -> 1
        System.out.println("iss[0][0]: " + iss[0][1]); -> 2
        System.out.println("iss[0][0]: " + iss[1][0]); -> 30
        System.out.println("iss[0][0]: " + iss[1][1]); -> 40
        }
      public static void main(String[] args) {
         new D().out();
      }
    }

(9) N차원배열
    N-1차원 배열을 데이터(element)로 갖는 배열


Collection( Data structure / 가변배열 )
# 같은 타입의 '참조형'데이터 '저장소'로써 그 크기가 변할 수 있는 '객체'

(1) 종류
    - java.util.Collection
       |               |
      List            Set
        |              |
 Vector, ArrayList...TreeSet
    - java.util.Map
            |
      Hashmap, hashtable,..

(2) 특성
   1) List
      - 순서를 보전
      - 중복된 데이터를 허용
      - day07/A.java
   2) Set (수학의 집합)
      - TreeSet
      - 순서를 보전하지 않음
      - 집합이 있어서 중복된 데이터는 1개만 출력됨
   3) Map ( 수학에서 1:1 대응이랑 비슷함 )
      - 순서를 보전하지 않음
      - key 와 value값 한쌍으로 저장됨
      - 정열 안됨
      - 키는 중복이 될 수 없음, value값 중복허용O
      - 키만 중복이 안되면 됨

        만약 key값이 중복되면... value값은 나중값으로 대체됨
   4) 확장
       - Generic (예 : A2, B2, C2.java) -> Object
       - AutoBoxing ( 예 : C3.java )
         -Boxing ( 예 : Boxing.java )
         -UnBoxing
       - ex) Vector<String> v = new Vector<String>();
       - Enhanced Loop
       for (int key : keys) { //진화된 루프
          System.out.println("key: " + key);
       }

   5) N차원 배열
      (N-1)차원 컬렉션을 데이터로(Element) 갖는 컬렉션

<OOP 특성>

(1) 상속성 (inheritance)
    ex) day07.java
    부모는 "모든 것"이 자식에게 "상속"되어지는 것(== '사용' 할 수 있는 것)
    소스 중복을 방지하기 위해서
    1) 자식 개체가 생성되려면.. 먼저 부모 객체가 생성되어야 함
       (다른 생성자가 하나도 없을 때에만 JVM이 기본생성자를 만들어 줌)
    2) 모든 생성자의 첫라인에는 super();가 생략되어 있다.
    3) 클래스간 상속은 하나만 가능하다. -> 단일 상속
    4) 재사용성이 있다.
    5) 모든 객체는 object의 자식이다. (묵시적 상속)
    6) 속성은 제로
    7) 부모메소드를 자식에서 재정의(==오버라이딩) 할 수 있음 -> 상속관계에서만 가능
    8) 형변환 -> 자동형변환 by JVM (자식 -> )
    9) 강제형변환은 원래의 자기타입을 되찾을 때만 가능
    10) 형제관계는 남남 관계가 맞다.
       - 형변환이 불가능하다.
       - Parent -> Child = 다운캐스팅
       - Child -> Parent = 업캐스팅
     class Parent {
     	String name;
         int age;
     }

     class Child extends Parent {
     	/*
         String name;
         int age;
         */
     	int number;
     }

     Parent p = new Parent();
     Child c = new Child();

     Parent p2 = (Parent)c; // 업캐스팅 - 자식에서 부모로
     Child c2 = (Child)p2; // 다운캐스팅 - 부모에서 자식으로

(2) 다형성 (Polymorphism) == 오버라이딩(재정의)
    - 같은 타입 객체의 같은 메소드가 다른 일을 하는 것

(3) 은닉성 (Information Hiding)
    - 외부 프로그램으로부터 '속성값'을 감추는 것

(4) 캡슐화 (Encapsulation) == 은닉성은 같은 개념임
    - 메소드의 캡슐화 : 메소드의 구현내용을 몰라도 그 형태만 알면 호출해서 사용할 수 있는 것을 캡슐화라고 함 (이름 파라미터 반환값)
    - 객체의 캡슐화 : 객체가 속성값들을 감추고 선택적인 메소드로 속성값들의 일부를 접근하게 하는 것

<예외처리>
(1) 예외(Exception)
    프로그램이 정상적으로 진행되지 못하게 하는 '돌발상황' (객체)
    int i = Integer.parseInt("가나다")
    숫자가 아닌 형태의 문자열을 숫자로 바꾸려 할때 발생함
    채팅하다가 상대방이 채팅방을 나가 버릴 때
    온라인 게임중에 전원케이블 차버렸을 때
    게임 서버 다운

(2) 처리 목적
    프로그램 진행시에 발생할 수 있는 "돌발상황"을 예외로 미리 정해놓고,
    해당하는 예외가 발생할 경우 '적절한 조치'를 취해서, 프로그램이 정상작동
    되도록 하는 것을 예외처리라고 한다.

(3) 계층도
    Object - Throwable - error/exception - compileException/RuntimeException
    ex) IOexception -> Compileexception
        NumberFormatException -> RuntimeException
        런타임 익셉션이 더 처리하기 어려움

    class A {
        void m() {
            String str = "100";
            int i = Integer.parseInt(str);
            System.out.println("i : " + (i+1));
        }
        public static void main(String[] args) {
            new A().m();
        }
    }

    # 인간이 개입할 때 try-catch 문을 사용한다.
(4) 특징 //Tester
     0) 일(생성자 or 메소드)할 때 발생할 수 있음
     1) throw로 예외 객체를 던짐(발생시킴)
     2) throws로 예외 발생 가능 "표식"을 함 ( == 소극적으로 '떠넘김')
     3) trycatch로 잡을 수 있음 ( == 적극적 "때려잡음" )

(5) 방법
   1) 때려 잡는 법
      try{
        예외가 발생할 수 있는 구문(생성자 or 메소드 호출)
      } catch (예외타입 예외객체 변수) {
          예외처리 로직
      }
   2) 떠넘기는 법
      throws 예외타입을 써줌

(6) 순서 (Try 블럭 안에 2개 이상의 예외가 발생할 수 있는 경우 )
    1) 상속관계 X
       [순서는 존재하지 않는다] - 아무예외나 먼저 잡아줌
       catch(MyException me) {}
       catch(YourException ye {}
    2) 상속관계 O
       [순서존재] - 하위예외를 먼저 잡아줌
       catch(YourException ye) {}
       catch(Exception e) {}

       Why? 왜 하위예외를 만들어서 먼저 잡아주는 것이 좋을까? 구체적이고 세련된 처리를 위해서 잡아줌

(7) 2개 이상의 예외를 떠넘길 때
    cf) '떠넘김(throws)'과 '때려잡음(try/catch)' 처리를 섞어 사용해도 됨

(8) finally 절
    ex) day09/C.java
    1) 항상 수행되는 절
       - 예외 발생 여부와 상관없이 수행
       - 심지어... return을 만나더라도 finally절 수행 후 리턴
    2) try절이 나오면.. catch절이 나오던지, finally절이 나오던지... 둘다 나오던지 해야 함
    3) 얘는 못이김 -> System.exit(0);, System.exit(-1);

       cf) API를 볼 줄 알아야 함

< 제한자 (Modifier) >
클래스, 변수, 생성자, 메소드 앞에 붙어거 기능을 '제한' 하는 예약어
(1) 접근제한자 (Access Modifier)
    1) 종류
       <1> public : 접근제한이 없음
       <2> private : 클래스 내부에서만 접근 가능 (캡슐화 구현)
       <3> protected : 같은 패키지 자원 or 다른패키지라도 상속관계(부모) 가능
       <4> default : 같은 패키지 자원만 접근이 가능함

    2) 특징
       <1> 클래스나 인터페이스 앞에 붙을 수 있는 접근제한자는 public과 default만 가능
       <2> 멤버, 생성자, 메소드 앞에 4개의 접근제한자 모두 붙일 수 있음
       (지역변수앞에는 default만, 클래스 앞에는 public과 default 모든 가능)
       <3> public 클래스나 인터페이스 이름은 파일이름과 같아야 함
       # 지역변수는 public이 못붙음

    3) 범위
       <1> 넓은 순위 : public > protected > default > private
       <2> 강력 순위 : public < protected < default < private

(2) 소유제한자 (static)
    -> static이 안붙으면 객체소유
    1) 멤버와 메소드 앞에만 붙을 수 있음
    2) static 자원은 클래스 이름을 접근
    3) static 메소드에서는 자원 접근 시 자신의 클래스 이름을 생략할 수 있음
       (단, 다른 클래스에서 접근시에는 생략 불가)
    4) 해당 클래스의 객체로도 static 자원을 접근할 수 있음
    5) static 메소드내에서 객체자원을 접근할 때는 객체를 생성시켜서 그 객체로 접근함
    6) static 자원은 메모리에 1개 생성되어서 그 클래스의 모든 객체에게 공유함

(3) 수정제한자 (final)
    붙으면 수정을 못하게 함
    1) 클래스, 변수(지역변수 포함), 메소드 앞에 붙을 수 있음
    2) 클래스 앞에 붙으면 자식을 못 낳고 변수 앞에 붙으면 초기값을 못 바꾸고, 메소드 앞에 붙으면 오버라이딩을 못하게 함

    ex) day10/E.java

(4) 추상제한자(abstract)
    1) 클래스와 메소드 앞에만 붙을 수 있음
    2) 하나 이상의 추상메소드를 가진 클래스는 반드시 추상클래스가 되어야한다.
    3) 추상클래스 객체는 '완벽한 자식클래스 객체(구멍이 없는)'를 만들어서 '형변환'하여 생성한다.
       참고) 추상클래스 : abstract 가 붙은 클래스
             추상메소드 : abstract가 붙은 메소드


(5) 기타제한자
    synchroized(쓰레드의 동기화), transient(보안)

<식별자 (Identifier) >
개발자가 임의로 설정하는 패키지, 클래스, 인터페이스, 변수, 생성자, 메소드 '이름'

(1) 규칙
    1) 숫자가 맨 앞에 나올 수 없음
    2) 특수문자는 두 개만 가능하다 _와 $만 가능하다.
    3) 길이의 제약은 없음

(2) 관례
    1) 개발자끼리 약속한 것
    2) 클래스나 인터페이스 이름의 첫문자는 '대문자'
    3) 두개 이상의 단어의 조합 다음 단어의 첫문자 '대문자'로 하거나, _로 해줌 CASE_INSENSITIVE
    4) 상수는 전체 문자를 '대문자로'
    5) 패키지, 변수, 메소드 첫문자는 소문자
    6) _와 $는 자제함
    ex) day10/H.java

(3) 팁
    1) Camel Case (자바의 변수 or 메소드) = setNameValue
    2) Pascal Case //클래스, 인터페이스 네임
       ex) UserName, UserAge
    3) Snake Case //자바의 상수 or Front Page
       ex) user_name, USER_AGE
    4) Kebab Case //RestFul API
       ex) user-name, USER-AGE
    5) Hungurian Notation //동적타입 언어에 주로 사용
       ex) userName, iUserAge


< this >
(1) 정의
    자신의 객체 or 생성자를 가르키는 대명사
(2) Case
    1) 지역변수와 이름이 같은 멤버변수를 해당 지역에서 접근할 때
    2) 자신의 생성자를 호출할 때
    3) 자신의 객체를 다른 클래스에게 넘길 때
    ex) day10/J.Java

< super >
(1) 부모의 '객체' or '생성자'를 가르키는 '대명사'

(2) Case
    1) 부모의 생성자를 호출할 때
    2) 이름이 동일한 부모의 멤버를 호출할 때
    3) 오버라이딩되기 전의 부모메소드를 호출할 때

< 인터페이스 >
(1) 정의
    '상수', '추상메소드', 'static 메소드', 'default 메소드 (이미 구성됨)' 로 구성된 껍데기 / 통로 / 메뉴판
(2) 특징
    1) 인터페이스 객체는 '완벽한 자식클래스'를 만들어서, 자식 객체 생성 후 형변환해서 만듬
    2) 인터페이스 static 메소드는 인터페이스 이름으로만 접근이 가능함
    3) 자식클래스를 만들때는 implements 예약어를 사용함
    4) 모든 추상메소드 앞에는 public abstract 생략
       interface앞에는 abstract가 생략되어있음
       모든 멤버변수 앞에는 public, static, final가 생략되어있음
       static 메소드와 default 메소드 앞에 public이 생략되어있음
    5) 인터페이스는 다중상속을 가능하게 함
    (class D (extends object) implements DInter1, DInter2...)
    6) 인터페이스끼리도 다중상속이 가능함
    (interface DInter extends DInter1, DInter2,...)

< 추상클래스와 인터페이스의 공통점/차이점 >
1) 공통점
   1) 추상메소드를 가질 수 있음
   2) '완벽한 자식클래스'의 객체
2) 차이점
    1) '클래스' 이고 '인터페이스'
    2) 추상클래스는 일반멤버(상수X) 일반멤버와 생성자를 가질 수 있음
    3) 구현 인터페이스의 메소드 앞에는 'default'가 나와야 함

< 하산-> Why? >
왜.. 쓰는가? -> 추상메소드랑 인터페이스 왜 쓰는가에 대한 근본적인 질문

class B implements ss {
    public void c() {} -> 이거 함수 구현된거임 ㅇㅋ?
}

내부클래스 ( Inner Class)
- 클래스안의 클래스

(1) 모양
 class A {
    class AInner {

    }
 }

(2) 객체생성
1) A.AInner1 in1 = new A().new AInner();
외부클래스 써주고 내부클래스 써줌

(3) main() 위치
   1) 제3클래스 or Outter클래스에 있을 때
      실행 > java.A
      실행 > java AUser
   2) Inner클래스에 있을 경우
      실행 > java.A$AInner1 //none static
      실행 > java.A$AInner2 // static

(4) 확장
    1) depth는 무한대
    2) class안에 '내부 interface', 'static 내부 interface' 가능
       ex) day12/B.java
       참고) class 구현클래스 외부클래스 or 외부인터페이스.내부인터페이스{}
             외부클래스 or 외부인터페이스.내인 변수 = new 구현클래스();

    3) interface 안에 '내부 interface', 'static 내부 interface' 가능
    4) 위의 2), 3) 모두는 다음과 같음
       - class 구현클래스 implements 외부클래스 or 내부클래스
       - 외부클래스 or 외부인터페이스.내부인터페이스 변수 = new 구현클래스();

(5) 왜 쓰는것일까? (중요) '외부클래스의 자원을 '자기것처럼 사용' 해야함'
    - HW와 OS간의 Interface : HW의 접근통로
    - REST(FUL) API (Application Programming Interface) : URL을 가지고 데이터베이스에 접근 통로
    - Lib API Specification : 클래스 라이브러리로 접근하는 통로
    - GUI (Graphic User Interface) : SW 로직에 접근하는 통로
    - class / interface : 구현객체 '접근통로'


Q. 뭐를 쓰면 외부클래스를 안써도 될까?
    - this의 세번째 용법을 사용하면 내부 클래스를 안써도 됨
    - 단점 : 항상 this를 넘겨줘야함ㅜㅜ

< @ 에너테이션 > //설명자
(1) 모양 : @
(2) JDK6 이상부터 지원함
(3) 기능
    1) 클래스나 생성자, 메소드에 붙어서 '정체성'을 부여함
    2) 기능을 확장하는 '표식'
    3) xml을 대신하여 '설명'하는 역할

< 쓰레드(Thread) >
(1) 정의
    Processs를 구성하는 '제어의 흐름'
(2) Process와 Thread
    1) Process : 프로그램의 '실행단위'
    2) Thread : Process를 구성하는 '작업단위'
(3) 장점
    1) 1개 Process로 여러개의 일을 동시에 수행
    2) 경량 프로세스라고 부르는 이유는 가볍기 때문이다.
    (이유 : 공통 Resource를 공유하고 있음)
(4) 생성하는 방법
    1) java.lang.Thread
    2) java.lang.Runnable 상속
(5) 시작
    thread.start();로 시작함
(6) 비유 : '피고용인' (Employee)
(7) lifeCycle
    1) 5가지 상태
    2) 각 상태는 '메소드' or '스케줄러' or '시간' or '상황' 등에 의해서 이동하게 됨
    3) 한번 돌아가시면 살아나지 못함
(8) Priority
    1) Ready 상태의 쓰레드 중에서
       우선적으로 CPU/GPU를 점유할 수 있는 쓰레드를 판별하기 위한 Level값
    2) 범위
        1 ~ 10까지
    3) 상수
       MAX_PRIORITY 10
       MIN_PRIORITY 1
       NORM_PRIORITY 5

    4) th.setPriority(int newPriority); //세팅
       int priority th.getPriority(); //겟팅

    5) 우선순위를 높이게 되면 스케쥴러에 의해 뽑힐 확률이 증가함

    6) 자식쓰레드에 join()을 걸어주면 부모가 먼저 떠날 수 없음

 (9) 동기화(*****)
    1) 비유 : 화장실의 문꼬리
    2) 무결성이 깨지는 '극단적인 예'
       int i = 0;
       i++;

       #CPU 연산단계#          Thread1     Thread2
       1. 현재 i값을 읽는 단계    i==0        i==1
       2. i값을 증가시키는 단계    i==0        i==1
       3. 증가된 i값을 i에 대입 단계 i==1       i==2

   3) 설명
       하나 이상의 쓰레드가 어떤 연산 or 로직에 동시에 접근했을 때,
       그 연산에 대한 값의 무결성을 보장하기 위해서 수행영역에 대한 Lock를 걸어주는 것

   4) 방법
     <1> synchronized void m() {
        //동기화가 필요한 로직들...
     }
     <2> void m() {
        //일반로직들...
        sysnchronized(this) {
        //동기화가 필요한 로직들...
        }
     }

< 람다식 >

정의: 익명 함수(Anonymous function)를 지칭하는 용어

(1) 파라미터와 리턴값을 달리한 람다식의 원리

< Advanced >
1) IO(Input과 Output)
(1) 스트림(Stream)
    -> 데이터의 흐름
    Data Source(근원지) -> 데이터의 목적지(data destination) 방향성을 가지고 있음
(2) 특징
    1) First In First Out (Queue)
    2) 지연성
    3) 단방향성
    4) 유연성
        예) BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
            InputStream reader = System.in; //(근본)
            InputStreamReader isr = new InputStreamReader(is); //(다리)
            BufferedReader br = new BufferedReader(isr); //(목적)
(3) 표준입력/출력
    키보드(System.in) --> 모니터(System.out)
    System.out.println -> PrintStream 메소드 안에 들어있던 것
(4) 구분
    1) 전송단위
        <1> 바이트 스트림 (1바이트 스트림)
            ex) XXXStream
        <2> 16비트 (1byte - 8bit) 문자 스트림 (2바이트 스트림)
            ex) XXXReader, XXXWriter
    2) 입출력
        <1> 입력
            ex) XXXInputStream, XXXReader
        <2> 출력
            ex) XXXOutputStream, XXXWriter
    3) 특성
        <1> 근본(node Stream) : '근원지', '목적지'와 직접 연결된 스트림
            ex) FileInputStream, FileOutputStream, ...
        <2> 다리(Bridge Stream) : 1byte스트림을 2byte스트림 변경
            ex) InputStreamReader, OutputStreamWriter, ...
        <3> 목적(Filter Stream) : '원하는 목적'의 기능을 가진 스트림
            ex) BufferedReader, PrintWriter, ...
(5) 주요스트림
    (1) InputStream / OutputStream // 조상(바이트)
    (2) FileInputStream / FileOutputStream // 파일
    (3) BufferedInputStream / BufferedOutputStream // 버퍼강화
    (4) DataInputStream / DataOutputStream //기본형+유니코드
        -> 기본형을 읽고 쓸수 있다.. / 유니코드 스트링을 읽고 쓰거나 하는 용도임
    (5) Reader / Writer //조상(문자)

    (6) FileReader / FileWriter // 파일(문자형태)

    (7) InputStreamReader / OutputStreamWriter //다리(1 -> 2)ㅏ

    (8) ㄴ


2) NetWork

3) GUI(graphic user Interface)

4) JDBC(Java Database Sys)
